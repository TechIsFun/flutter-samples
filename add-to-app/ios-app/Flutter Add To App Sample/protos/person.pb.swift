// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: protos/person.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// protoc --dart_out=./lib ./protos/person.proto
// protoc --swift_out=./ios/Classes ./protos/person.proto

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Excluding Commonwealth/Territory or Military
enum UsaState: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case az // = 0
  case ca // = 5

  /// ...
  case wa // = 47
  case wi // = 49
  case UNRECOGNIZED(Int)

  init() {
    self = .az
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .az
    case 5: self = .ca
    case 47: self = .wa
    case 49: self = .wi
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .az: return 0
    case .ca: return 5
    case .wa: return 47
    case .wi: return 49
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension UsaState: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [UsaState] = [
    .az,
    .ca,
    .wa,
    .wi,
  ]
}

#endif  // swift(>=4.2)

struct Person {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var name: String = String()

  var addresses: [UsaAddress] = []

  var supervisorOf: [Person] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct UsaAddress {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var streetNameAndNumber: String = String()

  var streetNameAndNumber2: String = String()

  /// nevermind validation
  var city: String = String()

  var state: UsaState = .az

  /// nevermind validation
  var postCode: UInt32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension UsaState: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "AZ"),
    5: .same(proto: "CA"),
    47: .same(proto: "WA"),
    49: .same(proto: "WI"),
  ]
}

extension Person: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "Person"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "addresses"),
    3: .same(proto: "supervisorOf"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.addresses) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.supervisorOf) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.addresses.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.addresses, fieldNumber: 2)
    }
    if !self.supervisorOf.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.supervisorOf, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Person, rhs: Person) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.addresses != rhs.addresses {return false}
    if lhs.supervisorOf != rhs.supervisorOf {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension UsaAddress: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "UsaAddress"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "streetNameAndNumber"),
    2: .same(proto: "streetNameAndNumber2"),
    3: .same(proto: "city"),
    4: .same(proto: "state"),
    5: .same(proto: "postCode"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.streetNameAndNumber) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.streetNameAndNumber2) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.city) }()
      case 4: try { try decoder.decodeSingularEnumField(value: &self.state) }()
      case 5: try { try decoder.decodeSingularUInt32Field(value: &self.postCode) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.streetNameAndNumber.isEmpty {
      try visitor.visitSingularStringField(value: self.streetNameAndNumber, fieldNumber: 1)
    }
    if !self.streetNameAndNumber2.isEmpty {
      try visitor.visitSingularStringField(value: self.streetNameAndNumber2, fieldNumber: 2)
    }
    if !self.city.isEmpty {
      try visitor.visitSingularStringField(value: self.city, fieldNumber: 3)
    }
    if self.state != .az {
      try visitor.visitSingularEnumField(value: self.state, fieldNumber: 4)
    }
    if self.postCode != 0 {
      try visitor.visitSingularUInt32Field(value: self.postCode, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: UsaAddress, rhs: UsaAddress) -> Bool {
    if lhs.streetNameAndNumber != rhs.streetNameAndNumber {return false}
    if lhs.streetNameAndNumber2 != rhs.streetNameAndNumber2 {return false}
    if lhs.city != rhs.city {return false}
    if lhs.state != rhs.state {return false}
    if lhs.postCode != rhs.postCode {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
