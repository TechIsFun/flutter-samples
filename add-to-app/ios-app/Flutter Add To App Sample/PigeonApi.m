// Autogenerated from Pigeon (v1.0.15), do not edit directly.
// See also: https://pub.dev/packages/pigeon
#import "PigeonApi.h"
#import <Flutter/Flutter.h>

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSDictionary<NSString *, id> *wrapResult(id result, FlutterError *error) {
  NSDictionary *errorDict = (NSDictionary *)[NSNull null];
  if (error) {
    errorDict = @{
        @"code": (error.code ? error.code : [NSNull null]),
        @"message": (error.message ? error.message : [NSNull null]),
        @"details": (error.details ? error.details : [NSNull null]),
        };
  }
  return @{
      @"result": (result ? result : [NSNull null]),
      @"error": errorDict,
      };
}

@interface PersonMessageModel ()
+ (PersonMessageModel *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end

@implementation PersonMessageModel
+ (PersonMessageModel *)fromMap:(NSDictionary *)dict {
  PersonMessageModel *result = [[PersonMessageModel alloc] init];
  result.name = dict[@"name"];
  if ((NSNull *)result.name == [NSNull null]) {
    result.name = nil;
  }
  return result;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.name ? self.name : [NSNull null]), @"name", nil];
}
@end

@interface FlutterApiCodecReader : FlutterStandardReader
@end
@implementation FlutterApiCodecReader
- (nullable id)readValueOfType:(UInt8)type 
{
  switch (type) {
    case 128:     
      return [PersonMessageModel fromMap:[self readValue]];
    
    default:    
      return [super readValueOfType:type];
    
  }
}
@end

@interface FlutterApiCodecWriter : FlutterStandardWriter
@end
@implementation FlutterApiCodecWriter
- (void)writeValue:(id)value 
{
  if ([value isKindOfClass:[PersonMessageModel class]]) {
    [self writeByte:128];
    [self writeValue:[value toMap]];
  } else 
{
    [super writeValue:value];
  }
}
@end

@interface FlutterApiCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation FlutterApiCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[FlutterApiCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[FlutterApiCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *FlutterApiGetCodec() {
  static dispatch_once_t s_pred = 0;
  static FlutterStandardMessageCodec *s_sharedObject = nil;
  dispatch_once(&s_pred, ^{
    FlutterApiCodecReaderWriter *readerWriter = [[FlutterApiCodecReaderWriter alloc] init];
    s_sharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return s_sharedObject;
}


@interface FlutterApi ()
@property (nonatomic, strong) NSObject<FlutterBinaryMessenger> *binaryMessenger;
@end

@implementation FlutterApi
- (instancetype)initWithBinaryMessenger:(NSObject<FlutterBinaryMessenger> *)binaryMessenger {
  self = [super init];
  if (self) {
    _binaryMessenger = binaryMessenger;
  }
  return self;
}

- (void)displayPersonPerson:(PersonMessageModel *)arg_person completion:(void(^)(NSError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.FlutterApi.displayPerson"
      binaryMessenger:self.binaryMessenger
      codec:FlutterApiGetCodec()];
  [channel sendMessage:@[arg_person] reply:^(id reply) {
    completion(nil);
  }];
}
@end
@interface NativeApiCodecReader : FlutterStandardReader
@end
@implementation NativeApiCodecReader
- (nullable id)readValueOfType:(UInt8)type 
{
  switch (type) {
    case 128:     
      return [PersonMessageModel fromMap:[self readValue]];
    
    default:    
      return [super readValueOfType:type];
    
  }
}
@end

@interface NativeApiCodecWriter : FlutterStandardWriter
@end
@implementation NativeApiCodecWriter
- (void)writeValue:(id)value 
{
  if ([value isKindOfClass:[PersonMessageModel class]]) {
    [self writeByte:128];
    [self writeValue:[value toMap]];
  } else 
{
    [super writeValue:value];
  }
}
@end

@interface NativeApiCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation NativeApiCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[NativeApiCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[NativeApiCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *NativeApiGetCodec() {
  static dispatch_once_t s_pred = 0;
  static FlutterStandardMessageCodec *s_sharedObject = nil;
  dispatch_once(&s_pred, ^{
    NativeApiCodecReaderWriter *readerWriter = [[NativeApiCodecReaderWriter alloc] init];
    s_sharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return s_sharedObject;
}


void NativeApiSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<NativeApi> *api) {
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.NativeApi.getPerson"
        binaryMessenger:binaryMessenger
        codec:NativeApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getPersonWithError:)], @"NativeApi api (%@) doesn't respond to @selector(getPersonWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        PersonMessageModel *output = [api getPersonWithError:&error];
        callback(wrapResult(output, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
}
